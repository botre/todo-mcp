// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package codegen

import (
	"context"
)

const completeTodo = `-- name: CompleteTodo :one
UPDATE todo
SET completed = 1
WHERE id = ?
RETURNING id, title, completed, created_at
`

func (q *Queries) CompleteTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, completeTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (title)
VALUES (?)
RETURNING id, title, completed, created_at
`

func (q *Queries) CreateTodo(ctx context.Context, title string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, title)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllTodos = `-- name: DeleteAllTodos :exec
DELETE FROM todo
`

func (q *Queries) DeleteAllTodos(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTodos)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getAllCompletedTodos = `-- name: GetAllCompletedTodos :many
SELECT id, title, completed, created_at
FROM todo
WHERE completed = 1
ORDER BY created_at DESC
`

func (q *Queries) GetAllCompletedTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompletedTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPendingTodos = `-- name: GetAllPendingTodos :many
SELECT id, title, completed, created_at
FROM todo
WHERE completed = 0
ORDER BY created_at ASC
`

func (q *Queries) GetAllPendingTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllPendingTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, title, completed, created_at
FROM todo
WHERE id = ?
`

func (q *Queries) GetTodoById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}
